package com.gjos.scala.html2stags

import scalatags._

private[html2stags] trait Xml2ScalatagMaps {
  /*
   * Defines a map that takes an XML tag name and returns a function from 
   * an existing HtmlTag, to a new HtmlTag wrapping the old one.
   * 
   * Compiled this list in Notepad++ from a simple newline-separated list of tag names.
   * Find:    ([^\n^\r]*)\r\n
   * Replace: "(\1)" -> \((\1)\(_\)\),\r\n
   */
  val tagMap: Map[String, Seq[HtmlTag] => HtmlTag] = Map(
    "html" -> (html(_)),
    "head" -> (head(_)),
    "title" -> (title(_)),
    "base" -> (base(_)),
    "link" -> (link(_)),
    "meta" -> (meta(_)),
    "style" -> (style(_)),
    "script" -> (script(_)),
    "noscript" -> (noscript(_)),
    "body" -> (body(_)),
    "section" -> (section(_)),
    "nav" -> (nav(_)),
    "article" -> (article(_)),
    "aside" -> (aside(_)),
    "h1" -> (h1(_)),
    "h2" -> (h2(_)),
    "h3" -> (h3(_)),
    "h4" -> (h4(_)),
    "h5" -> (h5(_)),
    "h6" -> (h6(_)),
    "hgroup" -> (hgroup(_)),
    "header" -> (header(_)),
    "footer" -> (footer(_)),
    "address" -> (address(_)),
    "p" -> (p(_)),
    "hr" -> (hr(_)),
    "pre" -> (pre(_)),
    "blockquote" -> (blockquote(_)),
    "ol" -> (ol(_)),
    "ul" -> (ul(_)),
    "li" -> (li(_)),
    "dl" -> (dl(_)),
    "dt" -> (dt(_)),
    "dd" -> (dd(_)),
    "figure" -> (figure(_)),
    "figcaption" -> (figcaption(_)),
    "div" -> (div(_)),
    "a" -> (a(_)),
    "em" -> (em(_)),
    "strong" -> (strong(_)),
    "small" -> (small(_)),
    "s" -> (s(_)),
    "cite" -> (cite(_)),
    "q" -> (q(_)),
    "dfn" -> (dfn(_)),
    "abbr" -> (abbr(_)),
    "data" -> (data(_)),
    "time" -> (time(_)),
    "code" -> (code(_)),
    "var" -> (`var`(_)),
    "sampl" -> (sampl(_)),
    "kbd" -> (kbd(_)),
    "sub" -> (sub(_)),
    "sup" -> (sup(_)),
    "i" -> (i(_)),
    "b" -> (b(_)),
    "u" -> (u(_)),
    "mark" -> (mark(_)),
    "ruby" -> (ruby(_)),
    "rt" -> (rt(_)),
    "rp" -> (rp(_)),
    "bdi" -> (bdi(_)),
    "bdo" -> (bdo(_)),
    "span" -> (span(_)),
    "br" -> (br(_)),
    "wbr" -> (wbr(_)),
    "ins" -> (ins(_)),
    "del" -> (del(_)),
    "img" -> (img(_)),
    "iframe" -> (iframe(_)),
    "embed" -> (embed(_)),
    "object" -> (`object`(_)),
    "param" -> (param(_)),
    "video" -> (video(_)),
    "audio" -> (audio(_)),
    "source" -> (source(_)),
    "track" -> (track(_)),
    "canvas" -> (canvas(_)),
    "map" -> (map(_)),
    "area" -> (area(_)),
    "svg" -> (svg(_)),
    "math" -> (math(_)),
    "table" -> (table(_)),
    "caption" -> (caption(_)),
    "colgroup" -> (colgroup(_)),
    "col" -> (col(_)),
    "tbody" -> (tbody(_)),
    "thead" -> (thead(_)),
    "tfoot" -> (tfoot(_)),
    "tr" -> (tr(_)),
    "td" -> (td(_)),
    "th" -> (th(_)),
    "form" -> (form(_)),
    "fieldset" -> (fieldset(_)),
    "legend" -> (legend(_)),
    "label" -> (label(_)),
    "input" -> (input(_)),
    "button" -> (button(_)),
    "select" -> (select(_)),
    "datalist" -> (datalist(_)),
    "optgroup" -> (optgroup(_)),
    "option" -> (option(_)),
    "textarea" -> (textarea(_)),
    "keygen" -> (keygen(_)),
    "output" -> (output(_)),
    "progress" -> (progress(_)),
    "meter" -> (meter(_)),
    "details" -> (details(_)),
    "summary" -> (summary(_)),
    "command" -> (command(_)),
    "menu"    -> (menu(_))
  )
  
  /*
   * Defines a map that takes an XML tag attribute name and returns a function from 
   * an existing HtmlTag, to a new HtmlTag wrapping the old one.
   * 
   * Same thing with Notepad++, except Replace by "(\1)" -> \(\(t, v\) => t.(\1)\(v\)\),\r\n
   */
  val attrMap: Map[String, (HtmlTag, String) => HtmlTag] = Map(
    "href" -> ((t, v) => t.href(v)),
    "action" -> ((t, v) => t.action(v)),
    "id" -> ((t, v) => t.id(v)),
    "link" -> ((t, v) => t.link(v)),
    "target" -> ((t, v) => t.target(v)),
    "name" -> ((t, v) => t.name(v)),
    "onblur" -> ((t, v) => t.onblur(v)),
    "onchange" -> ((t, v) => t.onchange(v)),
    "onclick" -> ((t, v) => t.onclick(v)),
    "onfocus" -> ((t, v) => t.onfocus(v)),
    "onkeydown" -> ((t, v) => t.onkeydown(v)),
    "onkeyup" -> ((t, v) => t.onkeyup(v)),
    "onkeypress" -> ((t, v) => t.onkeypress(v)),
    "onload" -> ((t, v) => t.onload(v)),
    "onmousedown" -> ((t, v) => t.onmousedown(v)),
    "onmousemove" -> ((t, v) => t.onmousemove(v)),
    "onmouseout" -> ((t, v) => t.onmouseout(v)),
    "onmouseover" -> ((t, v) => t.onmouseover(v)),
    "onmouseup" -> ((t, v) => t.onmouseup(v)),
    "onreset" -> ((t, v) => t.onreset(v)),
    "onselect" -> ((t, v) => t.onselect(v)),
    "onsubmit" -> ((t, v) => t.onsubmit(v)),
    "rel" -> ((t, v) => t.rel(v)),
    "rev" -> ((t, v) => t.rev(v)),
    "src" -> ((t, v) => t.src(v)),
    "style" -> ((t, v) => t.style(v)),
    "title" -> ((t, v) => t.title(v)),
    "ctype" -> ((t, v) => t.ctype(v)),
    "xmlns" -> ((t, v) => t.xmlns(v)),
    "class" -> ((t, v) => t.cls(v.split(" ").mkString("\"", ", ", "\""))),
    "placeholder" -> ((t, v) => t.placeholder(v)),
    "value" -> ((t, v) => t.value(v)),
    "cursor" -> ((t, v) => t.cursor(v)),
    "display" -> ((t, v) => t.display(v)),
    "float" -> ((t, v) => t.float(v)),
    "opacity" -> ((t, v) => t.opacity(v)),
    "z_index" -> ((t, v) => t.z_index(v)),
    "clear" -> ((t, v) => t.clear(v)),
    "color" -> ((t, v) => t.color(v)),
    "position" -> ((t, v) => t.position(v)),
    "overflow" -> ((t, v) => t.overflow(v)),
    "overflow_x" -> ((t, v) => t.overflow_x(v)),
    "overflow_y" -> ((t, v) => t.overflow_y(v)),
    "vertical_align" -> ((t, v) => t.vertical_align(v)),
    "visibility" -> ((t, v) => t.visibility(v)),
    "white_space" -> ((t, v) => t.white_space(v)),
    "top" -> ((t, v) => t.top(v)),
    "left" -> ((t, v) => t.left(v)),
    "bottom" -> ((t, v) => t.bottom(v)),
    "right" -> ((t, v) => t.right(v)),
    "height" -> ((t, v) => t.height(v)),
    "width" -> ((t, v) => t.width(v)),
    "max_height" -> ((t, v) => t.max_height(v)),
    "max_width" -> ((t, v) => t.max_width(v)),
    "background" -> ((t, v) => t.background(v)),
    "background_attachment" -> ((t, v) => t.background_attachment(v)),
    "background_color" -> ((t, v) => t.background_color(v)),
    "background_image" -> ((t, v) => t.background_image(v)),
    "background_position" -> ((t, v) => t.background_position(v)),
    "background_repeat" -> ((t, v) => t.background_repeat(v)),
    "border" -> ((t, v) => t.border(v)),
    "border_collapse" -> ((t, v) => t.border_collapse(v)),
    "bordercolor" -> ((t, v) => t.bordercolor(v)),
    "border_spacing" -> ((t, v) => t.border_spacing(v)),
    "border_style" -> ((t, v) => t.border_style(v)),
    "border_width" -> ((t, v) => t.border_width(v)),
    "margin_top" -> ((t, v) => t.margin_top(v)),
    "margin_bottom" -> ((t, v) => t.margin_bottom(v)),
    "margin_left" -> ((t, v) => t.margin_left(v)),
    "margin_right" -> ((t, v) => t.margin_right(v)),
    "margin" -> ((t, v) => t.margin(v, v, v, v)),
    "padding_top" -> ((t, v) => t.padding_top(v)),
    "padding_bottom" -> ((t, v) => t.padding_bottom(v)),
    "padding_left" -> ((t, v) => t.padding_left(v)),
    "padding_right" -> ((t, v) => t.padding_right(v)),
    "padding" -> ((t, v) => t.padding(v, v, v, v)),
    "fL" -> ((t, v) => t.float("left")),
    "fR" -> ((t, v) => t.float("right")),
    "mL" -> ((t, v) => t.mL(v)),
    "mR" -> ((t, v) => t.mR(v)),
    "mT" -> ((t, v) => t.mT(v)),
    "mB" -> ((t, v) => t.mB(v)),
    "h" -> ((t, v) => t.h(v)),
    "w" -> ((t, v) => t.w(v)),
    "center" -> ((t, v) => t.margin_left("auto").margin_right("auto"))
  )
  
}